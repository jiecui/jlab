function [amplitude,frequency]=trempeak(fname,nchans)

% trempeak returns the amplitude and frequency of tremor recorded with Polhemus Fastrak 
%
% [amplitude,frequency]=trempeak(fname,nchans) returns 3-D amplitude in cm 
%  and frequency in Hz. 
%  PSD (signal processing toolbox) and pickpeak (HOSA toolbox)
%  are called.
%  fname is a ASCII file genertaed by Fastrak, ideally 30 seconds duration.
%  nchans, the number of channels recorded, can be either 1 or 2
%  example {amp, freq]=trempeak('c:\data\rightarm.txt',1)

% read ASCII file generated by Fastrak
[fidr, message]=fopen([fname],'r');
status=fseek(fidr,0,'eof'); 
w=26; %default line width: 3 dofaq, 120 hz ad rate
l=floor(ftell(fidr)/w); %number of complete lines of data
status=fseek(fidr,0,'bof'); z=fread(fidr);
status=fclose(fidr);

%replace missed data points if any
f10=z(26:26:length(z)); u=1;
fa=min(find(f10~=10)); %find first, if any, line with skipped data point
if fa<3601
while fa>0
   fu(u)=fa; u=u+1;
   z((fa-1)*26+17)=32; z((fa-1)*26+18)=32; %set last digit of y coor and next digit to null; 
   while z((fa+1)*26)~=10
   z=[z(1:(fa-1)*26+16)' 32 z((fa-1)*26+17:length(z))']';
end
z(fa*26)=10;
f10=z(26:26:length(z));
fa=min(find(f10~=10)); 
end
elseif fa>3600
   z=z(1:26*3600);
end

%convert ASCII to numbers
   a=(reshape(z,[w floor(length(z)/26)]))'; 
   lgth=min(3600,length(a));
   as=zeros(lgth,3);
   for ww=1:3
      ts=a(1:lgth,(ww-1)*7+4:ww*7+3);
      fe=find(sum(ts')==224);
      ts(fe,:)=ts(fe-1,:);
     as(1:length(ts),ww)= abs(str2num(char(ts)));
  end
  
  %%set missed data points, if any, to average of preceding and suceeding values 
  while u>1; 
     as(fu(u-1),3)=(as(fu(u-1)-2,3)+as(fu(u-1)+2,3))/2; u=u-1; 
  end
  
 % analysis if one sensor recording at 120/sec 
if nchans ==1
   windowlength=512; f=0:120/windowlength:60;  
 for ww=1:3
    p(:,ww)=(psd(as(:,ww),windowlength,120,kaiser(windowlength,11),windowlength/2,'linear')/windowlength);
 end
 pp=sqrt(sum((sqrt(p')*4).^2)); %root mean square peak-peak power in 3-D
 dp=diff(pp(9:51)); dpm=dp(dp>-0.005); rp=(max(dpm)-mean(dpm))/std(dpm); %maximum of differential of spectrum
if rp>2 %only measure amplitude if there is significant frequency peak
   [pa,pf]=max(dp); 
   while dp(pf+1)>0; pf=pf+1; end % power peak may be at frequency above greatest power rise
        frequency=f(pf+9);
        mf=detrend(as);
        for x=1:3; gg=[]; ff=[];
			[locp,valp]=pickpeak(mf(:,x),round(61*frequency),90/frequency); 
         locp=sort(locp(locp>0)); % arrange locations of local max in ascending order
         for dd=1:length(locp)-1
            gg(dd)=mf(locp(dd),x);
            ff(dd)=min(mf(locp(dd):locp(dd+1),x));%find local minimum between each max
         end
         amp(x)=mean(gg)-mean(ff);
         end
         amplitude=sqrt(sum(amp.^2));  
     else frequency=0; amplitude=0;
     end
     
     % analysis if 2 chans recorded, each at 60/sec
elseif nchans==2
   windowlength=256; f=0:60/windowlength:30;
for ww=1:3
      p1(:,ww)=(psd(as(1:2:lgth,ww),windowlength,60,kaiser(windowlength,11),windowlength/2,'linear')/windowlength);
      p2(:,ww)=(psd(as(2:2:lgth,ww),windowlength,60,kaiser(windowlength,11),windowlength/2,'linear')/windowlength);
   end
     pp(1,:)=sqrt(sum((sqrt(p1')*4).^2));   
     pp(2,:)=sqrt(sum((sqrt(p2')*4).^2));   
     dp=diff(pp(:,9:51)'); 
     dpm1=dp(dp(:,1)>-0.005,1);   rp(1)=(max(dpm1)-mean(dpm1))./std(dpm1);
     dpm2=dp(dp(:,2)>-0.005,2);   rp(2)=(max(dpm2)-mean(dpm2))./std(dpm2);
      for ch=1:2
      if rp(ch)>2
         [pa,pf]=max(dp(:,ch)); 
         while dp(pf+1)>0; pf=pf+1; end 
        frequency(ch)=f(pf+9);      
        mf=detrend(as(ch:2:lgth,:));
        for x=1:3; gg=[]; ff=[];
			[locp,valp]=pickpeak(mf(:,x),round(31*frequency(ch)),45/frequency(ch)); 
         locp=sort(locp(locp>0)); % arrange locations of local max in ascending order
         for dd=1:length(locp)-1
            gg(dd)=mf(locp(dd),x);
            ff(dd)=min(mf(locp(dd):locp(dd+1),x));%find local minimum between each max
         end
         amp(x)=mean(gg)-mean(ff);
         end
         amplitude(ch)=sqrt(sum(amp.^2));   
     else frequency(ch)=0; amplitude(ch)=0;
     end
     end
end
