function chunk_info = getChunkInfo(fid, chunk_id, chunk_range)
% GETCHUNKINFO scans a given RF data file to obtain a structure of the
%       chunks, whose type is identified by chunk ID
%
% Syntax:
%   chunk_info = getChunkInfo(fid, chunk_id, chunk_range)
% 
% Input(s):
%   fid         - file ID (generated by fopen())
%   chunk_id    - defined in RF2 = 0xff | '*' << 8, where * represents a
%                 lettter (a - z, A - Z)
%   chunk_range - sequence range of the chunks of interest
%
% Output(s):
%   chunk_info  - a structure
%                 .chunk_found
%                           logical, true = the chunk tagged by chunk_id is
%                           found
%                 .position 
%                           [N,1] array, each element is the position of
%                           the beginning of the cunks in the RF file,
%                           where N is the number of this type of chunk.
%                 .sequence
%                           [N,1] array, the sequence number of the chunks
%
% Example:
%
% See also .

% Copyright 2011 Richard J. Cui. Created: 10/30/2011 10:20:11.622 AM
% $Revision: 0.2 $  $Date: Sun 11/27/2011  4:00:43.818 PM $
%
% Visual Neuroscience Lab (Dr. Martinez-Conde)
% Barrow Neurological Institute
% 350 W Thomas Road
% Phoenix AZ 85013, USA
%
% Email: jie@neurocorrleate.com

% ============================
% parameters
% ============================
% id_contrast = bitor(hex2dec('ff'), bitshift(double('c'),8));
chunk_info = struct('position',[],'sequence',[]);   % list of chunk pointers
chunk_position = [];
chunk_sequence = [];

% ============================
% scan file
% ============================
% get file length
fseek(fid,0,'eof');
filelength = ftell(fid);

% reset the pointer
frewind(fid);           % Move file position indicator to beginning
chunkpos = ftell(fid);  % current chunk pointer position
seq = 0;
while chunkpos < filelength
    
    seq = seq + 1;
    % seek chunk head
    potential_chunkhead = fread(fid,1,'ushort');
    if potential_chunkhead == chunk_id;
        % record chunk position
        chunk_position = cat(1,chunk_position,chunkpos);
        chunk_sequence = cat(1, chunk_sequence, seq);
    end
    % move pointer to the beginning of next chunk
    chunklength = fread(fid,1,'ushort');    % current chunk length
    % set the pointer to the next chunk
    chunkpos = chunkpos+chunklength;
    fseek(fid,chunkpos,'bof');
    
end%while

if isempty(chunk_position)
    chunk_found = false;
else
    idx = chunk_sequence >= chunk_range( 1 ) & chunk_sequence <= chunk_range( 2 );
    chunk_position = chunk_position( idx );
    chunk_sequence = chunk_sequence( idx );
    chunk_found = true;
end % if

% output
chunk_info.ChunkFound = chunk_found;
chunk_info.position = chunk_position;
chunk_info.sequence = chunk_sequence;

end % function scanConRF

% [EOF]
